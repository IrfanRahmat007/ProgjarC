import RLib.SRR;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ASUS-PC
 */
public class MainSClient extends javax.swing.JFrame {

    /**
     * Creates new form MainSClient
     */
    private Socket sockClient;
    private String IP;
    private ObjectOutputStream OUS = null;
    private ObjectInputStream OIS = null;
    private File SF;
    
    public MainSClient() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        TxtIP = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        CmdConnect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TxtPath = new javax.swing.JTextField();
        CmdBrowse = new javax.swing.JButton();
        CmdUpload = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LstFile = new javax.swing.JList();
        CmdDownload = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtLog = new javax.swing.JTextArea();
        CmdExit = new javax.swing.JButton();
        CmdRefresh = new javax.swing.JButton();
        PgbProgress = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Server Address :");

        TxtIP.setText("127.0.0.1");

        CmdConnect.setText("Connect");
        CmdConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdConnectActionPerformed(evt);
            }
        });

        jLabel2.setText("Upload File : ");

        TxtPath.setEditable(false);

        CmdBrowse.setText("Browse...");
        CmdBrowse.setEnabled(false);
        CmdBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdBrowseActionPerformed(evt);
            }
        });

        CmdUpload.setText("Upload");
        CmdUpload.setEnabled(false);
        CmdUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdUploadActionPerformed(evt);
            }
        });

        jLabel3.setText("File List :");

        LstFile.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                LstFileValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(LstFile);

        CmdDownload.setText("Download");
        CmdDownload.setEnabled(false);
        CmdDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdDownloadActionPerformed(evt);
            }
        });

        TxtLog.setEditable(false);
        TxtLog.setColumns(20);
        TxtLog.setRows(5);
        jScrollPane2.setViewportView(TxtLog);

        CmdExit.setText("Exit");
        CmdExit.setEnabled(false);
        CmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdExitActionPerformed(evt);
            }
        });

        CmdRefresh.setText("Refresh");
        CmdRefresh.setEnabled(false);
        CmdRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdRefreshActionPerformed(evt);
            }
        });

        PgbProgress.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jSeparator2)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TxtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addComponent(TxtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CmdConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CmdBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CmdDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CmdRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PgbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(CmdExit)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CmdUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CmdConnect))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TxtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CmdBrowse))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CmdUpload)
                .addGap(13, 13, 13)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CmdDownload)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CmdRefresh))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CmdExit)
                    .addComponent(PgbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CmdConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdConnectActionPerformed
        PgbProgress.setValue(PgbProgress.getMinimum());
        try {
            // TODO add your handling code here:
            log("Connecting to "+TxtIP.getText());
            sockClient=new Socket(TxtIP.getText(), 6060);
            OUS = new ObjectOutputStream(sockClient.getOutputStream());
            OUS.flush();
            OUS.reset();
            OIS = new ObjectInputStream(sockClient.getInputStream());
            log("Connected");
            CmdConnect.setEnabled(false);
            EnableCMD();
        } catch (IOException ex) {
            Logger.getLogger(MainSClient.class.getName()).log(Level.SEVERE, null, ex);
            log(ex.getMessage());
        }
        PgbProgress.setValue(PgbProgress.getMaximum());
    }//GEN-LAST:event_CmdConnectActionPerformed

    private void CmdRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdRefreshActionPerformed
        // TODO add your handling code here:
        DisableCMD();
        SRR SR = new SRR();
        SR.setType(0);
        SR.setRequestCode(1);
        try {
            Send( SR);
            SRR Response = null;
            Response = Receive();
            DefaultListModel LM = new DefaultListModel();
            for(int i = 0;i<Response.getFilelist().size();i++)
            {
                LM.addElement(Response.getFilelist().get(i));
            }
            LstFile.setModel(LM);
            EnableCMD();
        } catch (IOException ex) {
            Logger.getLogger(MainSClient.class.getName()).log(Level.SEVERE, null, ex);
            log(ex.getMessage());
        }
        
    }//GEN-LAST:event_CmdRefreshActionPerformed

    private void CmdBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdBrowseActionPerformed
        // TODO add your handling code here:
                JFileChooser OPF = new JFileChooser();
        OPF.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = OPF.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            TxtPath.setText(OPF.getSelectedFile().getPath());
             SF= OPF.getSelectedFile();
            // user selects a file
        }

    }//GEN-LAST:event_CmdBrowseActionPerformed

    private void LstFileValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_LstFileValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_LstFileValueChanged

    private void CmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdExitActionPerformed
        // TODO add your handling code here:
        SRR SR = new SRR();
        SR.setType(0);
        SR.setRequestCode(4);
        try {
            Send(SR);
            SRR SR2 = Receive();
            OUS.close();
            OIS.close();
            sockClient.close();
            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(MainSClient.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_CmdExitActionPerformed

    private void CmdUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdUploadActionPerformed
        // TODO add your handling code here:
        if(TxtPath.getText().equals(""))
        {
            log("No file selected.");
            return;
        }
    }//GEN-LAST:event_CmdUploadActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        SRR SR = new SRR();
        SR.setType(0);
        SR.setRequestCode(4);
        try {
            Send(SR);
            SRR SR2 = Receive();
            OUS.close();
            OIS.close();
            sockClient.close();
            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(MainSClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void CmdDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdDownloadActionPerformed
        // TODO add your handling code here:
        if(LstFile.getSelectedIndex()==-1)
        {
            log("No file selected");
            return;
        }
    }//GEN-LAST:event_CmdDownloadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainSClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainSClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainSClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainSClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainSClient().setVisible(true);
            }
        });
    }

    private void Send(SRR msg) throws IOException
    {
        OUS.writeObject(msg);
        OUS.flush();
        OUS.reset();
    }
    
    private SRR Receive()
    {
        SRR temp=null;
        try {
            temp = (SRR)OIS.readObject();
        } catch (IOException ex) {
            Logger.getLogger(MainSClient.class.getName()).log(Level.SEVERE, null, ex);
            log(ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainSClient.class.getName()).log(Level.SEVERE, null, ex);
            log(ex.getMessage());
        }
        return temp;
    }
    
    private void EnableCMD()
    {
        CmdRefresh.setEnabled(true);
        CmdExit.setEnabled(true);
        CmdBrowse.setEnabled(true);
        CmdUpload.setEnabled(true);
        CmdDownload.setEnabled(true);
    }
    
    private void DisableCMD()
    {
        CmdRefresh.setEnabled(!true);
        CmdExit.setEnabled(!true);
        CmdBrowse.setEnabled(!true);
        CmdUpload.setEnabled(!true);
        CmdDownload.setEnabled(!true);
    }
    
    private void log(String msg)
    {
        TxtLog.append(msg+"\n");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CmdBrowse;
    private javax.swing.JButton CmdConnect;
    private javax.swing.JButton CmdDownload;
    private javax.swing.JButton CmdExit;
    private javax.swing.JButton CmdRefresh;
    private javax.swing.JButton CmdUpload;
    private javax.swing.JList LstFile;
    private javax.swing.JProgressBar PgbProgress;
    private javax.swing.JTextField TxtIP;
    private javax.swing.JTextArea TxtLog;
    private javax.swing.JTextField TxtPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
